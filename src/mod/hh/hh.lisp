(in-package #:moto)

;; Это теперь в vacancy.lisp
;; special syntax for pattern-matching - ON
(named-readtables:in-readtable :fare-quasiquote)



;; Это теперь в response.lisp
;; 

(in-package #:moto)

(defun uns-uni ()
  "unsort        | uninteresting |")
(defun uns-int ()
  "unsort        | interesting   |")
(defun uns-res ()
  "unsort        | responded     |")
(defun uns-bee ()
  "unsort        | beenviewed    |")
(defun uns-rej ()
  "unsort        | reject        |")
(defun uns-inv ()
  "unsort        | invite        |")
(defun uni-int ()
  "uninteresting | interesting   |")
(defun uni-res ()
  "uninteresting | responded     |")
(defun uni-uni ()
  "uninteresting | uninteresting |")
(defun int-uni ()
  "interesting   | uninteresting |")
(defun int-res ()
  "interesting   | responded     |")
(defun int-int ()
  "interesting   | interesting   |")
(defun res-bee ()
  "responded     | beenviewed    |")
(defun res-uni ()
  "responded     | uninteresting |")
(defun res-rej ()
  "responded     | reject        |")
(defun res-inv ()
  "responded     | invite        |")
(defun res-res ()
  "responded     | responded     |")
(defun bee-uni ()
  "beenviewed    | uninteresting |")
(defun bee-rej ()
  "beenviewed    | reject        |")
(defun bee-inv ()
  "beenviewed    | invite        |")
(defun bee-tes ()
  "beenviewed    | testjob       |")
(defun bee-bee ()
  "beenviewed    | beenviewed    |")
(defun tes-inv ()
  "testjob       | invite        |")
(defun tes-int ()
  "testjob       | interview     |")
(defun tes-uni ()
  "testjob       | uninteresting |")
(defun tes-off ()
  "testjob       | offer         |")
(defun tes-tes ()
  "testjob       | testjob       |")
(defun rej-res ()
  "reject        | responded     |")
(defun rej-uni ()
  "reject        | uninteresting |")
(defun rej-rej ()
  "reject        | reject        |")
(defun inv-inv ()
  "invite        | invite        |")
(defun inv-uni ()
  "invite        | uninteresting |")
(defun inv-tes ()
  "invite        | testjob       |")
(defun inv-int ()
  "invite        | interview     |")
(defun int-uni ()
  "interview     | uninteresting |")
(defun int-dis ()
  "interview     | discard       |")
(defun int-tes ()
  "interview     | testjob       |")
(defun int-int ()
  "interview     | interview     |")
(defun dis-uni ()
  "discard       | uninteresting |")
(defun dis-dis ()
  "discard       | discard       |")
(defun int-off ()
  "interview     | offer         |")
(defun off-uni ()
  "offer         | uninteresting |")
(defun off-off ()
  "offer         | offer         |")
(defun off-onj ()
  "offer         | accept        |")
(defun acc-acc ()
  "accept        | accept        |")
(in-package #:moto)

(defun rai ()
  "active-inactive")

(defun ria ()
  "inactive-active")
(in-package #:moto)

(defun rule-activation ()
  "| active   | inactive |")
(defun rule-deactivation ()
  "| inactive | active   |")


;; Тестируем hh
(defun hh-test ()
  
  
  (dbg "passed: hh-test~%"))
(hh-test)

;; Pattern matching test
;; (dbg "match_1: ~A" (match 1 (1 2)))
;; (dbg "match_2: ~A" (match '(1 2 3 4) (`(1 ,x ,@y) (list x y))))

;; special syntax for pattern-matching - OFF
;; (named-readtables:in-readtable :standard)
