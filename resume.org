#+HTML_HEAD: <!-- -*- fill-column: 87 -*- -->
#+HTML_HEAD: <!-- org-toggle-inline-images -->

#+TITLE: Модуль HeadHunter (Resume Operations)

#+INFOJS_OPT: view:overview toc:nil

#+NAME:css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="/css/css.css" />
#+END_HTML


** START Жизненный цикл резюме

   Создание резюме на hh.ru начинается с перехода на страницу
   "http://spb.hh.ru/applicant/resumes/view?resume=" где расположена форма, которая
   предлагает добавить следующие данные:

   - Фото (photo)
   - Имя, возраст, город  (personal)
   - Контакты  (contacts)
   - Желаемая должность и зарплата  (job-position)
   - Образование (education)
   - Опыт работы  (experience)

   Каждый из вариантов ведет на свою страницу с шаблоном
   "http://spb.hh.ru/applicant/resumes/edit/{SECTION}?resume=", где в {SECTON}
   подставляется название раздела. На этих страницах размещены формы, которые
   отправляют POST-запросы, формируя секции резюме. Рассмотрим эти POST-запросы
   подробнее в следующих подразделах.

   После отправки POST-запроса сервер запоминает данные формы в сессии и возвращает
   заголовок LOCATION на основную страницу резюме, но теперь присваивает резюме
   идентификатор. Таким образом адрес становится таким:
   http://spb.hh.ru/applicant/resumes/view?resume=341309a0ff02d634530039ed1f543763556562

   Drakma автоматически переходит по location, так что реальное значение resume нужно
   извлекать из возвращаемого значения uri.

   После того, как все разделы заполнены резюме можно опубликовать.

   Резюме также можно удалить по идентификатору.

   Резюме сопровождается артефактами (фотографиями), которые привязываются к
   нему. Артефакты можно загружать, выбирать и удалять.

   Видимость резюме можно настраивать. Существуют следующие настройки:

   - Всему интернету ()
   - Не видно никому
     Ваше резюме будет недоступно для просмотра всем работодателям и кадровым
     агентствам, а также не будет выводиться в результатах поиска по базе данных. Вы
     сможете откликаться таким резюме на заинтересовавшие вас вакансии сайта
     HeadHunter. При отклике на конкретную вакансию компании «Z», настройки видимости
     вашего резюме автоматически изменятся на «Не видно никому, кроме: компания «Z».
   - Компаниям, являющимся клиентами HeadHunter
   - Только перечисленным компаниям
   - Компаниям, зарегистрированным на HeadHunter, кроме...
     Ваше резюме будет доступно для просмотра всем компаниям и кадровым агентствам,
     которые зарегистрированы на HeadHunter, за исключением тех, которые вы отметите в
     специальном окне. Таким резюме вы сможете откликаться на все вакансии сайта
     HeadHunter, однако те компании, которым вы запретили просматривать свое резюме, не
     будут иметь к нему доступ через поиск по базе данных и по прямой ссылке. При
     отклике на конкретную вакансию компании «Z», внесенной вами в stop-список,
     настройки видимости вашего резюме автоматически изменятся, и компания «Z» удалится
     из stop-списка.
   - По прямой ссылке

   Настройка видимости осуществляется на странице:
   http://spb.hh.ru/applicant/resumes/edit/visibility?resume=9555a7ecff02588d3c0039ed1f454162305732
   и производится посылкой POST-запроса вида:

   accessType.string={VISIBILITY}
   _xsrf=b2dccfd0ce2ff68b2c4f795ac6d549fb

   Где вместо {VISIBILITY} посылается тип видимости:

   -everyone
   -no_one
   -clients
   -invisibleResumeToVisible=true& accessType.string=clients
   -accessType.string=blacklist&_xsrf=b2dccfd0ce2ff68b2c4f795ac6d549fb
   -direct

   [TODO] - Выполнить весь жизненный цикл резюме
   [TODO] - Осущестлять редактирование резюме и изменять его видимость

   Этот блок необходим для генерации POST-запросов

   #+NAME: gen_post
   #+BEGIN_SRC emacs-lisp :var personal_eq='() var="" :exports none
     (gen-post personal_eq var)
   #+END_SRC

   Этот макрос формирует тело POST-запроса:

   #+NAME: assembly_post
   #+BEGIN_SRC lisp
     (defmacro assembly-post (&body body)
       `(format nil "~{~A~^&~}"
                (mapcar #'(lambda (x)
                            (format nil "~A=~A" (car x) (cdr x)))
                        ,@body)))
   #+END_SRC

   Этот макрос отсылает POST-запрос, формируя его с помощью =assembly-post=:

   #+NAME: send_post
   #+BEGIN_SRC lisp
     (defmacro send-post ((url cookie-jar cookie-alist) &body body)
       `(drakma:http-request
         ,url
         :user-agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:42.0) Gecko/20100101 Firefox/42.0"
         :method :post
         :content (assembly-post ,@body)
         :content-type "application/x-www-form-urlencoded; charset=UTF-8"
         :redirect 10
         :additional-headers
         `(("Accept" . "*/*")
           ("Accept-Language" . "en-US,en;q=0.5")
           ("X-Xsrftoken" . ,(cdr (assoc "_xsrf" ,cookie-alist :test #'equal)))
           ("X-Requested-With" . "XMLHttpRequest")
           ("Referer" . ,,url)
           ("Connection" . "keep-alive")
           ("Pragma" . "no-cache")
           ("Cache-Control" . "no-cache"))
         :cookie-jar ,cookie-jar
         :force-binary t))
   #+END_SRC

   Этот макрос оборачивает отправку POST-запроса в =multiple-value-bind= чтобы получить ответ:

   #+NAME: send_post_multiple_values
   #+BEGIN_SRC lisp
     (defmacro send-post-multiple-values ((personal-url cookie-jar cookie-alist &body alist) &body body)
       `(multiple-value-bind (body-or-stream status-code headers uri stream must-close reason-phrase)
            (send-post (,personal-url ,cookie-jar ,cookie-alist) ,@alist)
          ,@body))
   #+END_SRC

   Этот макрос получает =cookie-alist= - ассоциативный список ключей и значений cookie
   из =cookie-jar=:

   #+NAME: with_cookie_alist
   #+BEGIN_SRC lisp
     (defmacro with-cookie-alist ((cookie-jar) &body body)
       `(let ((cookie-alist (mapcar #'(lambda (cookie)
                                        (cons (drakma:cookie-name cookie) (drakma:cookie-value cookie)))
                                    (drakma:cookie-jar-cookies ,cookie-jar))))
          ,@body))
   #+END_SRC

   Теперь мы можем реализовать макросом основной сценарий заполения полей резюме:
   сначала запрашивем страницу, где размещены все резюме, потом запрашиваем страницу
   для заполнения одной из секций резюме, потом отправляем POST-запрос с заполенными
   полями, и наконец возвращаем полученный ответ:

   #+NAME: with_set_resume_section
   #+BEGIN_SRC lisp
     (defmacro with-set-resume-section ((section-url &body post-data) &body body)
       ;; Сначала запросим основную страницу резюме
       `(let ((main-url (format nil "http://spb.hh.ru/applicant/resumes/view?resume=~A" resume-id)))
          (multiple-value-bind (response cookie-jar url)
              (hh-get-page main-url cookie-jar *hh_account* "http://spb.hh.ru")
            ;; Теперь запрашиваем section-url
            (multiple-value-bind (response cookie-jar url)
                (hh-get-page ,section-url cookie-jar *hh_account* "http://spb.hh.ru")
              (with-cookie-alist (cookie-jar)
                (send-post-multiple-values (,section-url cookie-jar cookie-alist ,@post-data)
                  ,@body))))))
   #+END_SRC

*** TODO Фото (=photo=)
**** При выборе уже загруженных фото

     photo.string=94187420
     type=RESUME_PHOTO
     file=
     title=&_xsrf=b2dccfd0ce2ff68b2c4f795ac6d549fb

**** При загрузке новой фотографии

     POST http://spb.hh.ru/applicant/resumes/artifacts/upload

     Content-Type: multipart/form-data;
     boundary=---------------------------41026768278304188928476747
     Content-Length: 1364120

     -----------------------------41026768278304188928476747
     Content-Disposition: form-data; name="_xsrf"

     b2dccfd0ce2ff68b2c4f795ac6d549fb
     -----------------------------41026768278304188928476747
     Content-Disposition: form-data; name="user"

     3681852
     -----------------------------41026768278304188928476747
     Content-Disposition: form-data; name="type"

     RESUME_PHOTO
     -----------------------------41026768278304188928476747
     Content-Disposition: form-data; name="file"; filename="20150726_212228.jpg"
     Content-Type: image/jpeg

     ÿØÿá0OExif

**** Удаление фото

     POST http://spb.hh.ru/applicant/resumes/artifacts/remove

     id=98616186
     user=3681852

*** DONE Имя, возраст, город (=personal=)

    Сопоставим каждому полю в POST-запросе соответствующий accessor:

    #+NAME: personal_eq
    | lastName.string              | last-name                |
    | firstName.string             | first-name               |
    | middleName.string            | middle-name              |
    | birthday.date                | birthday                 |
    | gender.string                | gender                   |
    | area.string                  | area                     |
    | metro.string                 | metro                    |
    | relocation.string            | relocation               |
    | relocationArea.string        | relocation-area          |
    | businessTripReadiness.string | business-trip-readiness  |
    | citizenship                  | citizen-ship             |
    | citizenship.string           | citizen-ship             |
    | workTicket                   | work-ticket              |
    | workTicket.string            | work-ticket              |
    | travelTime.string            | travel-time              |

    Сгенерируем из этой таблицы код, который формирует POST-запрос и напишем процедуру
    которая его отсылает:

    #+NAME: set_resume_personal
    #+BEGIN_SRC lisp
      (in-package #:moto)

      (defun set-resume-personal (cookie-jar resume &optional (resume-id ""))
        (with-set-resume-section ((format nil "http://spb.hh.ru/applicant/resumes/edit/personal?resume=~A" resume-id)
                                  <<gen_post(personal_eq, "resume")>>
                                  )
          (values
           uri
           headers
           (flexi-streams:octets-to-string body-or-stream :external-format :utf-8))))

      ;; (let ((cookie-jar (make-instance 'drakma:cookie-jar)))
      ;;   (print (set-resume-personal cookie-jar (car (all-resume)))))
   #+END_SRC

*** TODO Контакты (=contacts=)

    Страница hh.ru, которая принимает POST-запрос, изменяющий контакты использует
    позиционные маркеры, вроде =phone.type=, которые отделяют друг от друга блоки
    одинаковых ключей. Поэтому мне пришлось немного модифицировать =gen_post=, чтобы
    позиционные маркеры отправлялись "как есть", а не оборачивалось в вызов
    accessor-a. В остальном все работает таким же образом как и в предыдущем разделе

    #+NAME: contacts_eq
    | phone.type              | :cell              |
    | phone.country           | cell-phone-country |
    | phone.city              | cell-phone-city    |
    | phone.number            | cell-phone-number  |
    | phone.comment           | cell-phone-comment |
    | phone.type              | :home              |
    | phone.country           | home-phone-country |
    | phone.city              | home-phone-city    |
    | phone.number            | home-phone-number  |
    | phone.comment           | home-phone-comment |
    | phone.type              | :work              |
    | phone.country           | home-phone-country |
    | phone.city              | home-phone-city    |
    | phone.number            | home-phone-number  |
    | phone.comment           | home-phone-comment |
    | email.string            | email-string       |
    | preferredContact.string | preferred-contact  |
    | personalSite.type       | :icq               |
    | personalSite.url        | icq                |
    | personalSite.type       | :skype             |
    | personalSite.url        | skype              |
    | personalSite.type       | :freelance         |
    | personalSite.url        | freelance          |
    | personalSite.type       | :moi_krug          |
    | personalSite.url        | moi_krug           |
    | personalSite.type       | :linkedin          |
    | personalSite.url        | linkedin           |
    | personalSite.type       | :facebook          |
    | personalSite.url        | facebook           |
    | personalSite.type       | :livejournal       |
    | personalSite.url        | livejournal        |
    | personalSite.type       | :personal          |
    | personalSite.url        | personal-site      |

    #+NAME: set_resume_contacts
    #+BEGIN_SRC lisp
      (in-package #:moto)

      (defun set-resume-contacts (cookie-jar resume &optional (resume-id ""))
        (with-set-resume-section ((format nil "http://spb.hh.ru/applicant/resumes/edit/contacts?resume=~A" resume-id)
                                  <<gen_post(contacts_eq, "resume")>>
                                  )
          (values
           uri
           headers
           (flexi-streams:octets-to-string body-or-stream :external-format :utf-8))))

      ;; (let ((cookie-jar (make-instance 'drakma:cookie-jar)))
      ;;   (print
      ;;    (set-resume-contacts cookie-jar (car (all-resume))
      ;;                         ;; "8eb43271ff030a44e00039ed1f735871443047"
      ;;                         )))
   #+END_SRC

*** DONE Желаемая должность и зарплата (=resume-position=)

    В этой секции программист hh наверно не был слишком аккуратен, поэтому в
    POST-запросе передаются какие-то мусорные profarea. Но мы дисциплинованно передаем
    их, чтобы не отличаться от простого пользователя.

    #+NAME: position_eq
      | profarea            | :               |
      | profarea            | :1              |
      | profarea            | :2              |
      | profarea            | :3              |
      | profarea            | :4              |
      | profarea            | :5              |
      | profarea            | :6              |
      | profarea            | :7              |
      | profarea            | :8              |
      | profarea            | :9              |
      | profarea            | :10             |
      | profarea            | :11             |
      | profarea            | :12             |
      | profarea            | :13             |
      | profarea            | :14             |
      | profarea            | :16             |
      | profarea            | :17             |
      | profarea            | :18             |
      | profarea            | :19             |
      | profarea            | :20             |
      | profarea            | :21             |
      | profarea            | :22             |
      | profarea            | :23             |
      | profarea            | :24             |
      | profarea            | :25             |
      | profarea            | :26             |
      | profarea            | :15             |
      | profarea            | :27             |
      | profarea            | :29             |
      | salary.amount       | salary-amount   |
      | salary.currency     | salary-currency |
      | employment.string   | employment      |
      | workSchedule.string | work-schedule   |


    Важно чтобы названия у разных резюме отличались, иначе возращается ошибка.

    #+NAME: set_resume_position
    #+BEGIN_SRC lisp
      (in-package #:moto)

      (defun set-resume-position (cookie-jar resume &optional (resume-id ""))
        (with-set-resume-section ((format nil "http://spb.hh.ru/applicant/resumes/edit/position?resume=~A" resume-id)
                                  (append
                                   `(("title.string" . ,(drakma:url-encode "Программист" :utf-8))
                                     ("profArea"     . ,(drakma:url-encode (prof-area resume) :utf-8)))
                                   (mapcar #'(lambda (x)
                                               `("specialization.string" . ,(drakma:url-encode x :utf-8)))
                                           (split-sequence:split-sequence #\Space (specializations resume)))
                                   <<gen_post(position_eq, "resume")>>
                                   ))
          (values
           uri
           headers
           (flexi-streams:octets-to-string body-or-stream :external-format :utf-8))))

      (print
       (let ((cookie-jar (make-instance 'drakma:cookie-jar)))
         (set-resume-position cookie-jar (car (all-resume))
                              ;; "8eb43271ff030a44e00039ed1f735871443047"
                              )))
   #+END_SRC

*** DONE Образование (=education=)

    В этой секции требуется провести небольшой рефакторинг и убедиться что в
    POST-запросе не наблюдается дублирования полей =primaryEducation.*= и =xsrf=. Хотя
    может быть так и должно быть, т.к. в оригинальном запросе это дублирование есть.

    Тем не менее пока все работает и так.

    #+NAME: education_eq
      | primaryEducation.id               | :                                  |
      | primaryEducation.name             | :                                  |
      | primaryEducation.universityId     | :                                  |
      | primaryEducation.facultyId        | :                                  |
      | primaryEducation.organization     | :                                  |
      | primaryEducation.result           | :                                  |
      | primaryEducation.specialtyId      | :                                  |
      | primaryEducation.year             | :                                  |
      | additionalEducation.id            | additional-education-id            |
      | additionalEducation.name          | additional-education-name          |
      | additionalEducation.organization  | additional-education-organization  |
      | additionalEducation.result        | additional-education-result        |
      | additionalEducation.year          | additional-education-year          |
      | certificate.id                    | certificate-id                     |
      | certificate.type                  | certificate-type                   |
      | certificate.selected              | certificate-selected               |
      | certificate.ownerName             | certificate-ownerName              |
      | certificate.transcriptionId       | certificate-transcription-id       |
      | certificate.password              | certificate-password               |
      | certificate.title                 | certificate-title                  |
      | certificate.achievementDate       | certificate-achievementDate        |
      | certificate.url                   | certificate-url                    |
      | attestationEducation.id           | attestation-education-id           |
      | attestationEducation.name         | attestation-education-name         |
      | attestationEducation.organization | attestation-education-organization |
      | attestationEducation.result       | attestation-education-result       |
      | attestationEducation.year         | attestation-education-year         |

    #+NAME: set_resume_education
    #+BEGIN_SRC lisp
      (in-package #:moto)

      (defmacro if-zero-then-empty (&body body)
        (let ((it (gensym "IT-")))
          `(let ((,it ,@body))
             (if (equal 0 ,it)
                 ""
                 (drakma:url-encode (format nil "~A" ,it) :utf-8)))))

      ;; (macroexpand-1 '(if-zero-then-empty (education-id education)))

      (defun set-resume-education (cookie-jar resume &optional (resume-id ""))
        (with-set-resume-section ((format nil "http://spb.hh.ru/applicant/resumes/edit/education?resume=~A" resume-id)
                                  (append
                                   `(("educationLevel.string" . ,(drakma:url-encode (education-level-string resume) :utf-8)))
                                   (let ((primary-education-id (car (split-sequence:split-sequence #\Space (educations resume)))))
                                     (if (null primary-education-id)
                                         (err "error education-id")
                                         (let ((education (get-education (parse-integer primary-education-id))))
                                           `(("primaryEducation.id"            . ,(if-zero-then-empty (education-id education)))
                                             ("primaryEducation.name"          . ,(drakma:url-encode (name education) :utf-8))
                                             ("primaryEducation.universityId"  . ,(drakma:url-encode (format nil "~A" (university-id education)) :utf-8))
                                             ("primaryEducation.facultyId"     . ,(if-zero-then-empty (faculty-id education)))
                                             ("primaryEducation.organization"  . ,(drakma:url-encode (organization education) :utf-8))
                                             ("primaryEducation.result"        . ,(drakma:url-encode (result education) :utf-8))
                                             ("primaryEducation.specialtyId"   . ,(drakma:url-encode (format nil "~A" (specialty-id education)) :utf-8))
                                             ("primaryEducation.year"          . ,(drakma:url-encode (format nil "~A" (year education)) :utf-8))))))
                                   <<gen_post(education_eq, "resume")>>
                                   (let ((langs))
                                     (mapcar #'(lambda (x)
                                                 (let ((lang (get-lang (parse-integer x))))
                                                   (push `("language.id"     . ,(drakma:url-encode (format nil "~A"(lang-id lang))     :utf-8)) langs)
                                                   (push `("language.degree" . ,(drakma:url-encode (format nil "~A" (lang-degree lang)) :utf-8)) langs)
                                                   ))
                                             (split-sequence:split-sequence #\Space (languages resume)))
                                     (reverse langs))
                                   `(
                                     ("_xsrf"                          . ,(cdr (assoc "_xsrf" cookie-alist :test #'equal))))
                                   )
                                  )
          (values
           uri
           headers
           (flexi-streams:octets-to-string body-or-stream :external-format :utf-8))))

      ;; (print
      ;;  (let ((cookie-jar (make-instance 'drakma:cookie-jar)))
      ;;    (set-resume-education cookie-jar (car (all-resume))
      ;;                      ;; "8eb43271ff030a44e00039ed1f735871443047"
      ;;                      )))
   #+END_SRC

*** START Опыт работы (=experience=)

    #+NAME: expirience_eq
      | type                         ||
      | portfolio.string             ||
      | file                         ||
      | title                        ||

    #+NAME: set_resume_expirience
    #+BEGIN_SRC lisp
      (in-package #:moto)

      ;; дубль if-sero-then-empty
      (defmacro url-enc (&body body)
        `(let ((it ,@body))
           (if (equal 0 it)
               ""
               (drakma:url-encode (format nil "~A" it) :utf-8))))

      (defun set-resume-expirience (cookie-jar resume &optional (resume-id ""))
        (with-set-resume-section ((format nil "http://spb.hh.ru/applicant/resumes/edit/experience?resume=~A" resume-id)
                                  (let ((resume (get-resume 1)))
                                    (append
                                     (apply 'append
                                            (loop :for item :in (split-sequence:split-sequence #\Space (expiriences resume)) :collect
                                               (let ((item (get-expirience (parse-integer item))))
                                                 `(("experience.companyName"      . ,(url-enc (name item)))
                                                   ("experience.companyId"        . ,(url-enc (company-id item)))
                                                   ("experience.companyAreaId"    . ,(url-enc (company-area-id item)))
                                                   ("experience.companyUrl"       . ,(url-enc (url item)))
                                                   ("experience.companyIndustryId". ,(url-enc (industry-id item)))
                                                   ("experience.companyIndustries". ,(url-enc (industries item)))
                                                   ("experience.companyIndustries". "") ;; compatibility: предположительно направления деятельности
                                                   ("experience.id"               . ,(url-enc (exp-id item)))
                                                   ("experience.position"         . ,(url-enc (job-position item)))
                                                   ("experience.startDate"        . ,(url-enc (start-date item)))
                                                   ("experience.endDate"          . ,(url-enc (end-date item)))
                                                   ("experience.description"      . ,(url-enc (description item)))
                                                   ))))
                                     (apply 'append
                                            (loop :for item :in (split-sequence:split-sequence #\Space (skills resume)) :collect
                                               (let ((item (get-skill (parse-integer item))))
                                                 `(("keySkills.string"      . ,(url-enc (name item)))))))
                                     `(("skills.string" . "%D0%92+%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BD%D0%B8%D0%B5+%D0%B3%D0%BE%D0%B4%D1%8B+%D0%BD%D0%B0%D1%85%D0%BE%D0%B6%D1%83%D1%81%D1%8C+%D0%BD%D0%B0+%D0%BF%D0%B5%D0%BD%D1%81%D0%B8%D0%B8.%0D%0A%D0%92+%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BD%D0%B5%D0%B5+%D0%B2%D1%80%D0%B5%D0%BC%D1%8F+%D0%BD%D0%B0%D1%85%D0%BE%D0%B6%D1%83%D1%81%D1%8C+%D0%B2+%D0%BF%D0%BE%D0%B8%D1%81%D0%BA%D0%B0%D1%85+%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%8B.%0D%0A%D0%92+%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BD%D0%B8%D0%B5+%D0%B3%D0%BE%D0%B4%D1%8B+%D0%BF%D1%80%D0%BE%D1%85%D0%BE%D0%B4%D0%B8%D0%BB+%D1%81%D0%BB%D1%83%D0%B6%D0%B1%D1%83+%D0%B2+%D0%B0%D1%80%D0%BC%D0%B8%D0%B8.%0D%0A%D0%92+%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BD%D0%B8%D0%B5+%D0%B3%D0%BE%D0%B4%D1%8B+%D0%BF%D1%80%D0%BE%D1%85%D0%BE%D0%B4%D0%B8%D0%BB+%D0%BE%D0%B1%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5+%D0%B1%D0%B5%D0%B7+%D0%B2%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8+%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D1%82%D1%8C.%0D%0A%D0%92+%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D0%B4%D0%BD%D0%B8%D0%B5+%D0%B3%D0%BE%D0%B4%D1%8B+%D0%BD%D0%B0%D1%85%D0%BE%D0%B4%D0%B8%D0%BB%D0%B0%D1%81%D1%8C+%D0%B2+%D0%B4%D0%B5%D0%BA%D1%80%D0%B5%D1%82%D0%BD%D0%BE%D0%BC+%D0%BE%D1%82%D0%BF%D1%83%D1%81%D0%BA%D0%B5.%0D%0A"))
                                     (apply 'append
                                            (loop :for item :in (split-sequence:split-sequence #\Space (recommendations resume)) :collect
                                               (let ((item (get-recommendation (parse-integer item))))
                                                 `(("recommendation.id"            . ,(url-enc (recommendation-id item)))
                                                   ("recommendation.name"          . ,(url-enc (name item)))
                                                   ("recommendation.position"      . ,(url-enc (job-position item)))
                                                   ("recommendation.organization"  . ,(url-enc (organization item)))
                                                   ("recommendation.contactInfo"   . ,(url-enc (contact-info item)))))))
                                     <<gen_post(expirience_eq, "resume")>>
                                     )))
          (values
           uri
           headers
           (flexi-streams:octets-to-string body-or-stream :external-format :utf-8))))

      ;; (print
      ;;  (let ((cookie-jar (make-instance 'drakma:cookie-jar)))
      ;;    (set-resume-expirience cookie-jar (car (all-resume))
      ;;                      ;; "8eb43271ff030a44e00039ed1f735871443047"
      ;;                      )))
   #+END_SRC

*** TODO Публикация (=touch=)

    #+NAME: touch
    #+BEGIN_SRC lisp
      (in-package #:moto)

      (defun touch (cookie-jar &optional (resume-id ""))
        ;; Сначала запросим основную страницу резюме
        (let ((main-url "http://spb.hh.ru/applicant/resumes/view?resume="))
          (multiple-value-bind (response cookie-jar url)
              (hh-get-page main-url cookie-jar *hh_account* "http://spb.hh.ru")
            ;; Теперь запрашиваем touch
            (let ((touch-url "http://spb.hh.ru/applicant/resumes/edit/touch?resume="))
              (multiple-value-bind (response cookie-jar url)
                  (hh-get-page touch-url cookie-jar *hh_account* "http://spb.hh.ru")
                ;; Получаем ключ-значения cookies
                (let ((cookie-alist (mapcar #'(lambda (cookie)
                                                (cons (drakma:cookie-name cookie) (drakma:cookie-value cookie)))
                                            (drakma:cookie-jar-cookies cookie-jar))))
                  ;; Отправляем POST
                   (multiple-value-bind (body-or-stream status-code headers uri stream must-close reason-phrase)
                       (drakma:http-request
                        touch-url
                        :user-agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:42.0) Gecko/20100101 Firefox/42.0"
                        :method :post
                        :content (format nil "~{~A~^&~}"
                                         (mapcar #'(lambda (x)
                                                     (format nil "~A=~A" (car x) (cdr x)))
                                                 `(("resume" . "341309a0ff02d634530039ed1f543763556562")
                                                   ("publish" . "next")
                                                   ("createVisibleResume" . "true&_xsrf=b2dccfd0ce2ff68b2c4f795ac6d549fb"))
                                                 ))
                        :content-type "application/x-www-form-urlencoded; charset=UTF-8"
                        :additional-headers
                        `(("Accept" . "*/*")
                          ("Accept-Language" . "en-US,en;q=0.5")
                          ;; ("Accept-Encoding" . "gzip, deflate")
                          ("X-Xsrftoken" . ,(cdr (assoc "_xsrf" cookie-alist :test #'equal)))
                          ("X-Requested-With" . "XMLHttpRequest")
                          ("Referer" . ,touch-url)
                          ("Connection" . "keep-alive")
                          ("Pragma" . "no-cache")
                          ("Cache-Control" . "no-cache")
                          )
                        :cookie-jar cookie-jar
                        :redirect 10
                        :force-binary t)
                     (return-from touch
                       (values
                        headers
                        (flexi-streams:octets-to-string body-or-stream :external-format :utf-8))))))))))

      ;; (print
      ;;  (let ((cookie-jar (make-instance 'drakma:cookie-jar)))
      ;;    (touch cookie-jar)))
   #+END_SRC

*** TODO Удаление резюме

    http://spb.hh.ru/applicant/deleteresume/

    resumeId=47592531
    _xsrf=b2dccfd0ce2ff68b2c4f795ac6d549fb

** TODO Синхронизация резюме на hh и в хранилище
*** Парсер резюме в личном кабинете
** TODO Создание резюме под вакасию по шаблону
*** Сущности шаблона резюме
* Сборка

  #+NAME: resume
  #+BEGIN_SRC lisp :tangle src/mod/hh/resume.lisp :noweb tangle :padline no :comments link
    (in-package #:moto)

    <<assembly_post>>

    <<send_post>>

    <<send_post_multiple_values>>

    <<with_cookie_alist>>

    <<with_set_resume_section>>

    <<set_resume_personal>>

    <<set_resume_contacts>>

    <<set_resume_position>>

    <<set_resume_education>>

    <<set_resume_expirience>>
   #+END_SRC
* Язык описания резюме

  Общая идея этого раздела в том, чтобы спроектировать язык описание резюме и написать
  его интерпретатор, который был бы способен создавать и модифицировать резюме и его
  составные элементы (такие как опыт работы, например) таким образом, чтобы
  осуществлять построение и пермутацию резюме как кода, представленного в виде AST.

  #+BEGIN_SRC lisp
    (in-package :moto)

    (defun hh-post-resume (cookie-jar &rest plist &key resume-id &allow-other-keys)
      ;; Если идентификатор резюме не указан - то используем пустую строку
      (unless resume-id
        (setf resume-id ""))
      ;; Сначала запросим основную страницу всех резюме
      (let ((main-url (format nil "http://spb.hh.ru/applicant/resumes/view?resume=~A" resume-id)))
        (multiple-value-bind (response cookie-jar url)
            (hh-get-page main-url cookie-jar *hh_account* "http://spb.hh.ru")
          ;; Теперь запросим страницу personal
          (let ((section-url (format nil "http://spb.hh.ru/applicant/resumes/edit/personal?resume=~A" resume-id)))
            (multiple-value-bind (response cookie-jar url)
                (hh-get-page section-url cookie-jar *hh_account* "http://spb.hh.ru")
              (with-cookie-alist (cookie-jar)
                (send-post-multiple-values
                    (section-url
                     cookie-jar
                     cookie-alist
                     `(("lastName.string" . ,(drakma:url-encode (getf plist :last-name) :utf-8))
                       ("firstName.string" . ,(drakma:url-encode (getf plist :first-name) :utf-8))
                       ("middleName.string" . ,(drakma:url-encode (getf plist :middle-name) :utf-8))
                       ("birthday.date" . ,(drakma:url-encode (getf plist :birthday) :utf-8))
                       ("gender.string" . ,(drakma:url-encode (getf plist :gender) :utf-8))
                       ("area.string" . ,(drakma:url-encode (getf plist :area) :utf-8))
                       ("metro.string" . ,(drakma:url-encode (getf plist :metro) :utf-8))
                       ("relocation.string" . ,(drakma:url-encode (getf plist :relocation) :utf-8))
                       ("relocationArea.string" . ,(drakma:url-encode (getf plist :relocation-area) :utf-8))
                       ("businessTripReadiness.string" . ,(drakma:url-encode (getf plist :business-trip-readiness) :utf-8))
                       ("citizenship" . ,(drakma:url-encode (getf plist :citizen-ship) :utf-8))
                       ("citizenship.string" . ,(drakma:url-encode (getf plist :citizen-ship) :utf-8))
                       ("workTicket" . ,(drakma:url-encode (getf plist :work-ticket) :utf-8))
                       ("workTicket.string" . ,(drakma:url-encode (getf plist :work-ticket) :utf-8))
                       ("travelTime.string" . ,(drakma:url-encode (getf plist :travel-time) :utf-8)))
                     )
                  ;; Получаем идентификатор резюме
                  (setf resume-id (cadr (split-sequence:split-sequence #\= (puri:uri-query uri))))))))
          (let ((section-url (format nil "http://spb.hh.ru/applicant/resumes/edit/education?resume=~A" resume-id)))
            (multiple-value-bind (response cookie-jar url)
                (hh-get-page section-url cookie-jar *hh_account* "http://spb.hh.ru")
              (with-cookie-alist (cookie-jar)
                (send-post-multiple-values
                    (section-url
                     cookie-jar
                     cookie-alist
                     (append
                      `(("educationLevel.string" . ,(drakma:url-encode "higher" :utf-8)))
                      (let ((edu (getf plist :primary-educations)))
                        `(("primaryEducation.id"            . "")
                          ("primaryEducation.name"          . ,(drakma:url-encode (getf edu :name) :utf-8))
                          ("primaryEducation.universityId"  . ,(drakma:url-encode (format nil "~A" 39864) :utf-8))
                          ("primaryEducation.facultyId"     . ,(if-zero-then-empty 0))
                          ("primaryEducation.organization"  . ,(drakma:url-encode "Режиссуры" :utf-8))
                          ("primaryEducation.result"        . ,(drakma:url-encode "Режиссура мультимедиа программ" :utf-8))
                          ("primaryEducation.specialtyId"   . ,(drakma:url-encode (format nil "~A" 224) :utf-8))
                          ("primaryEducation.year"          . ,(drakma:url-encode (format nil "~A" 2005) :utf-8))))
                      `(("additionalEducation.id" . ,(drakma:url-encode (getf plist :additional-education-id) :utf-8))
                        ("additionalEducation.name" . ,(drakma:url-encode (getf plist :additional-education-name) :utf-8))
                        ("additionalEducation.organization" . ,(drakma:url-encode (getf plist :additional-education-organization) :utf-8))
                        ("additionalEducation.result" . ,(drakma:url-encode (getf plist :additional-education-result) :utf-8))
                        ("additionalEducation.year" . ,(drakma:url-encode (getf plist :additional-education-year) :utf-8))
                        ("certificate.id" . ,(drakma:url-encode (getf plist :certificate-id) :utf-8))
                        ("certificate.type" . ,(drakma:url-encode (getf plist :certificate-type) :utf-8))
                        ("certificate.selected" . ,(drakma:url-encode (getf plist :certificate-selected) :utf-8))
                        ("certificate.ownerName" . ,(drakma:url-encode (getf plist :certificate-ownerName) :utf-8))
                        ("certificate.transcriptionId" . ,(drakma:url-encode (getf plist :certificate-transcription-id) :utf-8))
                        ("certificate.password" . ,(drakma:url-encode (getf plist :certificate-password) :utf-8))
                        ("certificate.title" . ,(drakma:url-encode (getf plist :certificate-title) :utf-8))
                        ("certificate.achievementDate" . ,(drakma:url-encode (getf plist :certificate-achievementDate) :utf-8))
                        ("certificate.url" . ,(drakma:url-encode (getf plist :certificate-url) :utf-8))
                        ("attestationEducation.id" . ,(drakma:url-encode (getf plist :attestation-education-id) :utf-8))
                        ("attestationEducation.name" . ,(drakma:url-encode (getf plist :attestation-education-name) :utf-8))
                        ("attestationEducation.organization" . ,(drakma:url-encode (getf plist :attestation-education-organization) :utf-8))
                        ("attestationEducation.result" . ,(drakma:url-encode (getf plist :attestation-education-result) :utf-8))
                        ("attestationEducation.year" . ,(drakma:url-encode (getf plist :attestation-education-year) :utf-8)))
                      `(
                        ("_xsrf"                          . ,(cdr (assoc "_xsrf" cookie-alist :test #'equal))))
                      ))))))
          (let ((section-url (format nil "http://spb.hh.ru/applicant/resumes/edit/position?resume=~A" resume-id)))
            (multiple-value-bind (response cookie-jar url)
                (hh-get-page section-url cookie-jar *hh_account* "http://spb.hh.ru")
              (with-cookie-alist (cookie-jar)
                (send-post-multiple-values
                    (section-url
                     cookie-jar
                     cookie-alist
                     (append
                      `(("title.string" . ,(drakma:url-encode (concatenate 'string "Программист" (symbol-name (gensym))) :utf-8))
                        ("profArea"     . ,(drakma:url-encode "1" :utf-8)))
                      (mapcar #'(lambda (x)
                                  `("specialization.string" . ,(drakma:url-encode x :utf-8)))
                              (split-sequence:split-sequence #\Space (specializations (car (all-resume)))))
                      `(("profarea" . "")
                        ("profarea" . "1")
                        ("profarea" . "2")
                        ("profarea" . "3")
                        ("profarea" . "4")
                        ("profarea" . "5")
                        ("profarea" . "6")
                        ("profarea" . "7")
                        ("profarea" . "8")
                        ("profarea" . "9")
                        ("profarea" . "10")
                        ("profarea" . "11")
                        ("profarea" . "12")
                        ("profarea" . "13")
                        ("profarea" . "14")
                        ("profarea" . "16")
                        ("profarea" . "17")
                        ("profarea" . "18")
                        ("profarea" . "19")
                        ("profarea" . "20")
                        ("profarea" . "21")
                        ("profarea" . "22")
                        ("profarea" . "23")
                        ("profarea" . "24")
                        ("profarea" . "25")
                        ("profarea" . "26")
                        ("profarea" . "15")
                        ("profarea" . "27")
                        ("profarea" . "29")
                        ("salary.amount" . ,(drakma:url-encode (salary-amount (car (all-resume))) :utf-8))
                        ("salary.currency" . ,(drakma:url-encode (salary-currency (car (all-resume))) :utf-8))
                        ("employment.string" . ,(drakma:url-encode (employment (car (all-resume))) :utf-8))
                        ("workSchedule.string" . ,(drakma:url-encode (work-schedule (car (all-resume))) :utf-8)))
                      `(
                        ("_xsrf"                          . ,(cdr (assoc "_xsrf" cookie-alist :test #'equal))))))))))
          (let ((section-url (format nil "http://spb.hh.ru/applicant/resumes/edit/position?resume=~A" resume-id)))
            (multiple-value-bind (response cookie-jar url)
                (hh-get-page section-url cookie-jar *hh_account* "http://spb.hh.ru")
              (with-cookie-alist (cookie-jar)
                (send-post-multiple-values
                    (section-url
                     cookie-jar
                     cookie-alist
                     (append
                      (loop :for exp :in (getf plist :expiriences) :append
                         (append
                          `(("experience.companyName" . ,(url-enc (getf exp :name)))
                            ("experience.companyId" . ,(url-enc (getf exp :company-id)))
                            ("experience.companyAreaId" . ,(url-enc (getf exp :company-area-id)))
                            ("experience.companyUrl" . ,(url-enc (getf exp :url)))
                            ("experience.companyIndustryId" . ,(url-enc (getf exp :industry-id))))
                          (loop :for indstr-id :in `("403" "668") ;; (getf exp :industries)
                             :append
                             `(("experience.companyIndustries" . ,(format nil "~A" indstr-id))))
                          `(("experience.companyIndustries" . "")
                            ("experience.id" . "")
                            ("experience.position" . ,(url-enc (getf exp :position)))
                            ("experience.startDate" . ,(url-enc (getf exp :start-date)))
                            ("experience.endDate" . ,(url-enc (getf exp :end-date)))
                            ("experience.description" . ,(url-enc (getf exp :description))))))
                      `(("_xsrf"                          . ,(cdr (assoc "_xsrf" cookie-alist :test #'equal))))))
                  (split-sequence:split-sequence #\= (puri:uri-query uri))
          )))))))

    (progn
    (let ((cookie-jar (make-instance 'drakma:cookie-jar)))
      (print
      (hh-post-resume cookie-jar
                      :last-name "Глухов"
                      :first-name "Михаил"
                      :middle-name "Михайлович"
                      :birthday "1982-12-15"
                      :gender "male"
                      :area "2"
                      :metro ""
                      :relocation "relocation_possible"
                      :relocation-area "1"
                      :business-trip-readiness "ready"
                      :citizen-ship "113"
                      :work-ticket "113"
                      :travel-time "any"
                      :education-level-string "higher"
                      :primary-educations `(:education-id "0" :name "Санкт-Петербургский государственный университет культуры и искусств, Санкт-Петербург"
                                                           :university-id "39864" :faculty-id "0" :organization "Режиссуры" :result "Режиссура мультимедиа программ"
                                                           :specialty-id "224" :year "2005")
                      :additional-education-id ""
                      :additional-education-name ""
                      :additional-education-organization ""
                      :additional-education-result ""
                      :additional-education-year ""
                      :certificate-id ""
                      :certificate-type ""
                      :certificate-selected ""
                      :certificate-ownerName ""
                      :certificate-transcription-id ""
                      :certificate-password ""
                      :certificate-title ""
                      :certificate-achievementDate ""
                      :certificate-url ""
                      :attestation-education-id ""
                      :attestation-education-name ""
                      :attestation-education-organization ""
                      :attestation-education-result ""
                      :attestation-education-year ""
                      :expiriences `((:Name "Ростелеком" :company-Id "2748" :company-Area-Id "113" :Url "" :Industry-Id "" :Industries `("399") :Industries "" :id "257556674" :position "Программист"
                                            :start-Date "2005-01-01" :end-Date "2010-01-01" :description "123123")
                                     (:Name "Водоканал ГУП СПб" :company-Id "27231" :company-Area-Id "2" :Url "" :Industry-Id "" :Industries `("403" "668") :id "" :position "Водолаз" :start-Date "1999-06-01"
                                            :end-Date "2000-01-01" :description "123"))
                      :languages `((:lang-id "34" :lang-degree "native")
                                   (:lang-id "57" :lang-degree "can_read")
                                   (:lang-id "58" :lang-degree "basic")
                                   (:lang-id "59" :lang-degree "none"))
                      ))))


    ;; :title "Senior Programmer"
    ;; (personal
    ;;  :last-name "Глухов"
    ;;  :first-name "Михаил"
    ;;  :middle-name "Михайлович"
    ;;  :birthday "1982-12-15"
    ;;  :gender "male"
    ;;  :area "2"
    ;;  :metro ""
    ;;  :relocation "relocation_possible"
    ;;  :relocation-area "1"
    ;;  :business-trip-readiness "ready"
    ;;  :citizen-ship "113"
    ;;  :work-ticket "113"
    ;;  :travel-time "any")
    ;; (contacts
    ;;  :cell-phone "7 911 2869290 В любое время"
    ;;  :home-phone "7"
    ;;  :work-phone "7"
    ;;  :email"avenger-f@yandex.ru"
    ;;  :preferred-contact "email"
    ;;  :icq ""
    ;;  :skype "i.am.rigidus"
    ;;  :freelance ""
    ;;  :moi_krug ""
    ;;  :linkedin ""
    ;;  :facebook ""
    ;;  :livejournal "rigidus"
    ;;  :personal-site "https://rigidus.ru")



    ;; (exp
    ;;  :company "AIS"
    ;;  :site "aintsys.com"
    ;;  :position "Lisp/Erlang-разработчик"
    ;;  :description "Разрабатываю решения в сфере электронных валют"
    ;;  :start-date "Январь 2012"
    ;;  :end-date  "Апрель 2012"
    ;;  :stage "4 месяца")
    ;; (exp
    ;;  :company "ООО РАВТА"
    ;;  :region "Санкт-Петербург,"
    ;;  :site "ravta.ru"
    ;;  :industries "Автомобильный бизнес.."
    ;;  :position "Директор по IT"
    ;;  :description "Осуществлял руководство разработкой информационной системы предприятия, занимался
    ;;     постановкой задач и контролем выполнения работ. Организовывал договорную работу с
    ;;     подрядчиками."
    ;;  :start-date "Май 2011"
    ;;  :end-date  "Январь 2012"
    ;;  :stage "9 месяцев")
    ;; (exp
    ;;  :company "WizardSoft"
    ;;  :region "Санкт-Петербург"
    ;;  :site "wizardsoft.ru"
    ;;  :position "Ведущий разработчик, архитектор"
    ;;  :description "Разработка высоконагрузочного портала для проведения строительных тендеров. Прототип
    ;;     реализован на Common Lisp, Postmodern и PostgreSQL, был переписан на PHP+Jquery по
    ;;     кадровым соображениям."
    ;;  :start-date "Сентябрь 2009"
    ;;  :end-date "Апрель 2011"
    ;;  :stage "1 год 8 месяцев")
    ;; (exp
    ;;  :company "ЦиFры"
    ;;  :region "Санкт-Петербург,"
    ;;  :site "www.320-8080.ru"
    ;;  :industries "Электроника, приборостроение, бытовая техника, компьютеры и оргтехника... "
    ;;  :position "Архитектор-проектировщик, веб-программист"
    ;;  :description "Перепроектировал и реализовал на Common Lisp высоконагрузочный интернет-магазин"
    ;;  :start-date "Январь 2007"
    ;;  :end-date "Сентябрь 2009"
    ;;  :stage "2 года 9 месяцев")
    ;; (exp
    ;;  :company "ООО Вебдом"
    ;;  :site  "webdom.net"
    ;;  :position "Ведущий веб-разработчик"
    ;;  :description "Cпроектировал и разработал масштабируемый фреймворк, на котором теперь работает
    ;;     компания. CMS на его основе поставляется клиентам."
    ;;  :start-date "Сентябрь 2005"
    ;;  :end-date "Январь 2007"
    ;;  :stage "1 год 5 месяцев")
    ;; (exp
    ;;  :company "Почин"
    ;;  :site "pochin.ru"
    ;;  :position "Программист"
    ;;  :descruption "Спроектировал и разработал интернет-магазин")

    ;; company
    ;; region
    ;; site
    ;; industries
    ;; position
    ;; start-date
    ;; end-date
    ;; description


    ;; last-name
    ;; first-name
    ;; middle-name
    ;; birthday
    ;; gender
    ;; area
    ;; metro
    ;; relocation
    ;; relocation-area
    ;; business-trip-readiness
    ;; citizen-ship
    ;; citizen-ship
    ;; work-ticket
    ;; work-ticket
    ;; travel-time
  #+END_SRC
