#+STARTUP: showall indent hidestars
#+TITLE: neuronetwork
#+HTML_HEAD: <!-- -*- fill-column: 86 -*- -->

#+NAME: css
#+BEGIN_HTML
<link rel="stylesheet" type="text/css" href="css/css.css" />
#+END_HTML

В качестве практикума, попробую написать несколько простых нейронных
сетей на Лиспе

* Один нейрон

Математически нейрон представляет собой взвешенный сумматор,
единственный выход которого определяется через его входы и матрицу
весов следующим образом:

y = f(u) , где u = Σ(wn*xn)+(w0*x0) , где

x - сигналы на входе нейрона
w - веса входа

Функция f(u) называется передаточной фукнцией, w0*x0 -
смещением. Передаточная функция определяет зависимость сигнала на
выходе нейрона от взвешенной суммы сигналов на его входах.

Основные типы передаточных функций:
- линейная - f(x) = tx
- пороговая (Хевисайда) f(x) = if (x >= T) then 1 else 0 , где T -
  смещение с отрицательным знаком
- сигмоидальная
- логистическая f(x) = 1 / (1+exp(tx)) , где t - параметр крутизны. У
  этой функции простая производная: (df(x) / dx) = tf(x)(1-f(x))
  область значений лежит в [0;1]
- гиперболический тангенс f(x) = (exp(x)-exp(-x)) / (exp(x)+exp(-x))
  область значений лежит в [-1;1]
- другие, которые пока рано рассматривать

Ну и в общем этого достаточно. Для того чтобы смоделировать нейрон,
который будет реализовывать NOT достаточно сделать так:

#+BEGIN_SRC lisp
  (defun neuro-not (x)

#+END_SRC
